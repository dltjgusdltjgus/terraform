### 시작 템플릿 -1 ###
resource "aws_launch_template" "example" {
  name_prefix   = "example-"
  image_id      = "ami-013218fccb68a90d4"
  instance_type = "t2.micro"

  vpc_security_group_ids = [aws_security_group.instance.id]

  user_data = base64encode(<<-EOF
              #!/bin/bash
              yum install -y httpd
              echo "Hello, World Server Port is ${var.server_port}" > /var/www/html/index.html
              systemctl enable --now httpd
              EOF
  )
tag_specifications {
    resource_type = "instance"

    tags = {
      Name = "example-instance"
    }
  }

  lifecycle {
    create_before_destroy = true
  }
}

### 시작템플릿 -2 ###

resource "aws_launch_template" "example" {
  name_prefix   = "example-"
  image_id      = "ami-013218fccb68a90d4"
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.instance.id]
  user_data = data.template_file.user_data.rendered
  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "example-instance"
    }
  }
  lifecycle {
    create_before_destroy = true
  }
}
launch_template {
    id      = aws_launch_template.example.id
    version = aws_launch_template.example.latest_version
  }
  availability_zones = ["ap-northeast-2a","ap-northeast-2c"]

### Alias ### 알리아스 ###
@echo off
terraform apply --auto-approve %*

### 보안그룹 ###

resource "aws_security_group" "alb" {
  name = var.alb_security_group_name

  # Allow inbound HTTP requests
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow all outbound requests
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


### 로드밸랜서 ###

resource "aws_lb" "example" {
  name               = var.alb_name
  load_balancer_type = "application"
  subnets            = data.aws_subnet_ids.default.ids
  security_groups    = [aws_security_group.alb.id]
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.example.arn
  port              = 80
  protocol          = "HTTP"

  # By default, return a simple 404 page
  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "404: page not found"
      status_code  = 404
    }
  }
}

resource "aws_lb_target_group" "asg" {
  name     = var.alb_name
  port     = var.server_port
  protocol = "HTTP"
  vpc_id   = data.aws_vpc.default.id

  health_check {
    path                = "/"
    protocol            = "HTTP"
    matcher             = "200"
    interval            = 15
    timeout             = 3
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

resource "aws_lb_listener_rule" "asg" {
  listener_arn = aws_lb_listener.http.arn
  priority     = 100

condition {
    path_pattern {
      values = ["*"]
    }
  }

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.asg.arn
  }
}